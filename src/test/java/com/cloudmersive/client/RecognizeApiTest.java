/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiException;
import java.io.File;
import com.cloudmersive.client.model.ImageDescriptionResponse;
import com.cloudmersive.client.model.ObjectDetectionResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecognizeApi
 */
@Ignore
public class RecognizeApiTest {

    private final RecognizeApi api = new RecognizeApi();

    
    /**
     * Describe an image in natural language
     *
     * Generate an English language text description of the image as a sentence.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recognizeDescribeTest() throws ApiException {
        File imageFile = null;
        ImageDescriptionResponse response = api.recognizeDescribe(imageFile);

        // TODO: test validations
    }
    
    /**
     * Detect objects, including types and locations, in an image
     *
     * Identify the position, size and description of objects in an image, along with a recognition confidence level.  Detects both human people and objects in an image.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recognizeDetectObjectsTest() throws ApiException {
        File imageFile = null;
        ObjectDetectionResult response = api.recognizeDetectObjects(imageFile);

        // TODO: test validations
    }
    
    /**
     * Detect people, including locations, in an image
     *
     * Identify the position, and size of human people in an image, along with a recognition confidence level.  People in the image do NOT need to be facing the camera; they can be facing away, edge-on, etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recognizeDetectPeopleTest() throws ApiException {
        File imageFile = null;
        ObjectDetectionResult response = api.recognizeDetectPeople(imageFile);

        // TODO: test validations
    }
    
}
